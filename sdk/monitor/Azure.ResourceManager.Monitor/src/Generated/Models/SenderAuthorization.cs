// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

namespace Azure.ResourceManager.Monitor.Models
{
    /// <summary>
    /// the authorization used by the user who has performed the operation that led to this event. This captures the RBAC properties of the event. These usually include the &apos;action&apos;, &apos;role&apos; and the &apos;scope&apos;
    /// Serialized Name: SenderAuthorization
    /// </summary>
    public partial class SenderAuthorization
    {
        /// <summary> Initializes a new instance of SenderAuthorization. </summary>
        internal SenderAuthorization()
        {
        }

        /// <summary> Initializes a new instance of SenderAuthorization. </summary>
        /// <param name="action">
        /// the permissible actions. For instance: microsoft.support/supporttickets/write
        /// Serialized Name: SenderAuthorization.action
        /// </param>
        /// <param name="role">
        /// the role of the user. For instance: Subscription Admin
        /// Serialized Name: SenderAuthorization.role
        /// </param>
        /// <param name="scope">
        /// the scope.
        /// Serialized Name: SenderAuthorization.scope
        /// </param>
        internal SenderAuthorization(string action, string role, string scope)
        {
            Action = action;
            Role = role;
            Scope = scope;
        }

        /// <summary>
        /// the permissible actions. For instance: microsoft.support/supporttickets/write
        /// Serialized Name: SenderAuthorization.action
        /// </summary>
        public string Action { get; }
        /// <summary>
        /// the role of the user. For instance: Subscription Admin
        /// Serialized Name: SenderAuthorization.role
        /// </summary>
        public string Role { get; }
        /// <summary>
        /// the scope.
        /// Serialized Name: SenderAuthorization.scope
        /// </summary>
        public string Scope { get; }
    }
}
