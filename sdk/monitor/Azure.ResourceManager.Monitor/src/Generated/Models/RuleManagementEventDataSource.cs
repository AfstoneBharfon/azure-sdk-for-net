// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using Azure.Core;

namespace Azure.ResourceManager.Monitor.Models
{
    /// <summary>
    /// A rule management event data source. The discriminator fields is always RuleManagementEventDataSource in this case.
    /// Serialized Name: RuleManagementEventDataSource
    /// </summary>
    public partial class RuleManagementEventDataSource : RuleDataSource
    {
        /// <summary> Initializes a new instance of RuleManagementEventDataSource. </summary>
        public RuleManagementEventDataSource()
        {
            OdataType = "Microsoft.Azure.Management.Insights.Models.RuleManagementEventDataSource";
        }

        /// <summary> Initializes a new instance of RuleManagementEventDataSource. </summary>
        /// <param name="odataType">
        /// specifies the type of data source. There are two types of rule data sources: RuleMetricDataSource and RuleManagementEventDataSource
        /// Serialized Name: RuleDataSource.odata.type
        /// </param>
        /// <param name="resourceId">
        /// the resource identifier of the resource the rule monitors. **NOTE**: this property cannot be updated for an existing rule.
        /// Serialized Name: RuleDataSource.resourceUri
        /// </param>
        /// <param name="legacyResourceId">
        /// the legacy resource identifier of the resource the rule monitors. **NOTE**: this property cannot be updated for an existing rule.
        /// Serialized Name: RuleDataSource.legacyResourceId
        /// </param>
        /// <param name="resourceLocation">
        /// the location of the resource.
        /// Serialized Name: RuleDataSource.resourceLocation
        /// </param>
        /// <param name="metricNamespace">
        /// the namespace of the metric.
        /// Serialized Name: RuleDataSource.metricNamespace
        /// </param>
        /// <param name="eventName">
        /// the event name.
        /// Serialized Name: RuleManagementEventDataSource.eventName
        /// </param>
        /// <param name="eventSource">
        /// the event source.
        /// Serialized Name: RuleManagementEventDataSource.eventSource
        /// </param>
        /// <param name="level">
        /// the level.
        /// Serialized Name: RuleManagementEventDataSource.level
        /// </param>
        /// <param name="operationName">
        /// The name of the operation that should be checked for. If no name is provided, any operation will match.
        /// Serialized Name: RuleManagementEventDataSource.operationName
        /// </param>
        /// <param name="resourceGroupName">
        /// the resource group name.
        /// Serialized Name: RuleManagementEventDataSource.resourceGroupName
        /// </param>
        /// <param name="resourceProviderName">
        /// the resource provider name.
        /// Serialized Name: RuleManagementEventDataSource.resourceProviderName
        /// </param>
        /// <param name="status">
        /// The status of the operation that should be checked for. If no status is provided, any status will match.
        /// Serialized Name: RuleManagementEventDataSource.status
        /// </param>
        /// <param name="subStatus">
        /// the substatus.
        /// Serialized Name: RuleManagementEventDataSource.subStatus
        /// </param>
        /// <param name="claims">
        /// the claims.
        /// Serialized Name: RuleManagementEventDataSource.claims
        /// </param>
        internal RuleManagementEventDataSource(string odataType, ResourceIdentifier resourceId, ResourceIdentifier legacyResourceId, string resourceLocation, string metricNamespace, string eventName, string eventSource, string level, string operationName, string resourceGroupName, string resourceProviderName, string status, string subStatus, RuleManagementEventClaimsDataSource claims) : base(odataType, resourceId, legacyResourceId, resourceLocation, metricNamespace)
        {
            EventName = eventName;
            EventSource = eventSource;
            Level = level;
            OperationName = operationName;
            ResourceGroupName = resourceGroupName;
            ResourceProviderName = resourceProviderName;
            Status = status;
            SubStatus = subStatus;
            Claims = claims;
            OdataType = odataType ?? "Microsoft.Azure.Management.Insights.Models.RuleManagementEventDataSource";
        }

        /// <summary>
        /// the event name.
        /// Serialized Name: RuleManagementEventDataSource.eventName
        /// </summary>
        public string EventName { get; set; }
        /// <summary>
        /// the event source.
        /// Serialized Name: RuleManagementEventDataSource.eventSource
        /// </summary>
        public string EventSource { get; set; }
        /// <summary>
        /// the level.
        /// Serialized Name: RuleManagementEventDataSource.level
        /// </summary>
        public string Level { get; set; }
        /// <summary>
        /// The name of the operation that should be checked for. If no name is provided, any operation will match.
        /// Serialized Name: RuleManagementEventDataSource.operationName
        /// </summary>
        public string OperationName { get; set; }
        /// <summary>
        /// the resource group name.
        /// Serialized Name: RuleManagementEventDataSource.resourceGroupName
        /// </summary>
        public string ResourceGroupName { get; set; }
        /// <summary>
        /// the resource provider name.
        /// Serialized Name: RuleManagementEventDataSource.resourceProviderName
        /// </summary>
        public string ResourceProviderName { get; set; }
        /// <summary>
        /// The status of the operation that should be checked for. If no status is provided, any status will match.
        /// Serialized Name: RuleManagementEventDataSource.status
        /// </summary>
        public string Status { get; set; }
        /// <summary>
        /// the substatus.
        /// Serialized Name: RuleManagementEventDataSource.subStatus
        /// </summary>
        public string SubStatus { get; set; }
        /// <summary>
        /// the claims.
        /// Serialized Name: RuleManagementEventDataSource.claims
        /// </summary>
        internal RuleManagementEventClaimsDataSource Claims { get; set; }
        /// <summary>
        /// the email address.
        /// Serialized Name: RuleManagementEventClaimsDataSource.emailAddress
        /// </summary>
        public string ClaimsEmailAddress
        {
            get => Claims is null ? default : Claims.EmailAddress;
            set
            {
                if (Claims is null)
                    Claims = new RuleManagementEventClaimsDataSource();
                Claims.EmailAddress = value;
            }
        }
    }
}
