// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;

namespace Azure.ResourceManager.Monitor.Models
{
    /// <summary>
    /// The response to a subscription scope metrics query.
    /// Serialized Name: SubscriptionScopeMetricResponse
    /// </summary>
    internal partial class SubscriptionScopeMetricResponse
    {
        /// <summary> Initializes a new instance of SubscriptionScopeMetricResponse. </summary>
        /// <param name="timespan">
        /// The timespan for which the data was retrieved. Its value consists of two datetimes concatenated, separated by &apos;/&apos;.  This may be adjusted in the future and returned back from what was originally requested.
        /// Serialized Name: SubscriptionScopeMetricResponse.timespan
        /// </param>
        /// <param name="value">
        /// the value of the collection.
        /// Serialized Name: SubscriptionScopeMetricResponse.value
        /// </param>
        /// <exception cref="ArgumentNullException"> <paramref name="timespan"/> or <paramref name="value"/> is null. </exception>
        internal SubscriptionScopeMetricResponse(string timespan, IEnumerable<SubscriptionMonitorMetric> value)
        {
            Argument.AssertNotNull(timespan, nameof(timespan));
            Argument.AssertNotNull(value, nameof(value));

            Timespan = timespan;
            Value = value.ToList();
        }

        /// <summary> Initializes a new instance of SubscriptionScopeMetricResponse. </summary>
        /// <param name="cost">
        /// The integer value representing the relative cost of the query.
        /// Serialized Name: SubscriptionScopeMetricResponse.cost
        /// </param>
        /// <param name="timespan">
        /// The timespan for which the data was retrieved. Its value consists of two datetimes concatenated, separated by &apos;/&apos;.  This may be adjusted in the future and returned back from what was originally requested.
        /// Serialized Name: SubscriptionScopeMetricResponse.timespan
        /// </param>
        /// <param name="interval">
        /// The interval (window size) for which the metric data was returned in.  This may be adjusted in the future and returned back from what was originally requested.  This is not present if a metadata request was made.
        /// Serialized Name: SubscriptionScopeMetricResponse.interval
        /// </param>
        /// <param name="namespace">
        /// The namespace of the metrics being queried
        /// Serialized Name: SubscriptionScopeMetricResponse.namespace
        /// </param>
        /// <param name="resourceregion">
        /// The region of the resource being queried for metrics.
        /// Serialized Name: SubscriptionScopeMetricResponse.resourceregion
        /// </param>
        /// <param name="value">
        /// the value of the collection.
        /// Serialized Name: SubscriptionScopeMetricResponse.value
        /// </param>
        internal SubscriptionScopeMetricResponse(int? cost, string timespan, TimeSpan? interval, string @namespace, string resourceregion, IReadOnlyList<SubscriptionMonitorMetric> value)
        {
            Cost = cost;
            Timespan = timespan;
            Interval = interval;
            Namespace = @namespace;
            Resourceregion = resourceregion;
            Value = value;
        }

        /// <summary>
        /// The integer value representing the relative cost of the query.
        /// Serialized Name: SubscriptionScopeMetricResponse.cost
        /// </summary>
        public int? Cost { get; }
        /// <summary>
        /// The timespan for which the data was retrieved. Its value consists of two datetimes concatenated, separated by &apos;/&apos;.  This may be adjusted in the future and returned back from what was originally requested.
        /// Serialized Name: SubscriptionScopeMetricResponse.timespan
        /// </summary>
        public string Timespan { get; }
        /// <summary>
        /// The interval (window size) for which the metric data was returned in.  This may be adjusted in the future and returned back from what was originally requested.  This is not present if a metadata request was made.
        /// Serialized Name: SubscriptionScopeMetricResponse.interval
        /// </summary>
        public TimeSpan? Interval { get; }
        /// <summary>
        /// The namespace of the metrics being queried
        /// Serialized Name: SubscriptionScopeMetricResponse.namespace
        /// </summary>
        public string Namespace { get; }
        /// <summary>
        /// The region of the resource being queried for metrics.
        /// Serialized Name: SubscriptionScopeMetricResponse.resourceregion
        /// </summary>
        public string Resourceregion { get; }
        /// <summary>
        /// the value of the collection.
        /// Serialized Name: SubscriptionScopeMetricResponse.value
        /// </summary>
        public IReadOnlyList<SubscriptionMonitorMetric> Value { get; }
    }
}
