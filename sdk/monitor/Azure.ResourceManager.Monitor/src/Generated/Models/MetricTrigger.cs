// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.Monitor.Models
{
    /// <summary>
    /// The trigger that results in a scaling action.
    /// Serialized Name: MetricTrigger
    /// </summary>
    public partial class MetricTrigger
    {
        /// <summary> Initializes a new instance of MetricTrigger. </summary>
        /// <param name="metricName">
        /// the name of the metric that defines what the rule monitors.
        /// Serialized Name: MetricTrigger.metricName
        /// </param>
        /// <param name="metricResourceId">
        /// the resource identifier of the resource the rule monitors.
        /// Serialized Name: MetricTrigger.metricResourceUri
        /// </param>
        /// <param name="timeGrain">
        /// the granularity of metrics the rule monitors. Must be one of the predefined values returned from metric definitions for the metric. Must be between 12 hours and 1 minute.
        /// Serialized Name: MetricTrigger.timeGrain
        /// </param>
        /// <param name="statistic">
        /// the metric statistic type. How the metrics from multiple instances are combined.
        /// Serialized Name: MetricTrigger.statistic
        /// </param>
        /// <param name="timeWindow">
        /// the range of time in which instance data is collected. This value must be greater than the delay in metric collection, which can vary from resource-to-resource. Must be between 12 hours and 5 minutes.
        /// Serialized Name: MetricTrigger.timeWindow
        /// </param>
        /// <param name="timeAggregation">
        /// time aggregation type. How the data that is collected should be combined over time. The default value is Average.
        /// Serialized Name: MetricTrigger.timeAggregation
        /// </param>
        /// <param name="operator">
        /// the operator that is used to compare the metric data and the threshold.
        /// Serialized Name: MetricTrigger.operator
        /// </param>
        /// <param name="threshold">
        /// the threshold of the metric that triggers the scale action.
        /// Serialized Name: MetricTrigger.threshold
        /// </param>
        /// <exception cref="ArgumentNullException"> <paramref name="metricName"/> or <paramref name="metricResourceId"/> is null. </exception>
        public MetricTrigger(string metricName, ResourceIdentifier metricResourceId, TimeSpan timeGrain, MetricStatisticType statistic, TimeSpan timeWindow, MetricTriggerTimeAggregationType timeAggregation, MetricTriggerComparisonOperation @operator, double threshold)
        {
            Argument.AssertNotNull(metricName, nameof(metricName));
            Argument.AssertNotNull(metricResourceId, nameof(metricResourceId));

            MetricName = metricName;
            MetricResourceId = metricResourceId;
            TimeGrain = timeGrain;
            Statistic = statistic;
            TimeWindow = timeWindow;
            TimeAggregation = timeAggregation;
            Operator = @operator;
            Threshold = threshold;
            Dimensions = new ChangeTrackingList<AutoscaleRuleMetricDimension>();
        }

        /// <summary> Initializes a new instance of MetricTrigger. </summary>
        /// <param name="metricName">
        /// the name of the metric that defines what the rule monitors.
        /// Serialized Name: MetricTrigger.metricName
        /// </param>
        /// <param name="metricNamespace">
        /// the namespace of the metric that defines what the rule monitors.
        /// Serialized Name: MetricTrigger.metricNamespace
        /// </param>
        /// <param name="metricResourceId">
        /// the resource identifier of the resource the rule monitors.
        /// Serialized Name: MetricTrigger.metricResourceUri
        /// </param>
        /// <param name="metricResourceLocation">
        /// the location of the resource the rule monitors.
        /// Serialized Name: MetricTrigger.metricResourceLocation
        /// </param>
        /// <param name="timeGrain">
        /// the granularity of metrics the rule monitors. Must be one of the predefined values returned from metric definitions for the metric. Must be between 12 hours and 1 minute.
        /// Serialized Name: MetricTrigger.timeGrain
        /// </param>
        /// <param name="statistic">
        /// the metric statistic type. How the metrics from multiple instances are combined.
        /// Serialized Name: MetricTrigger.statistic
        /// </param>
        /// <param name="timeWindow">
        /// the range of time in which instance data is collected. This value must be greater than the delay in metric collection, which can vary from resource-to-resource. Must be between 12 hours and 5 minutes.
        /// Serialized Name: MetricTrigger.timeWindow
        /// </param>
        /// <param name="timeAggregation">
        /// time aggregation type. How the data that is collected should be combined over time. The default value is Average.
        /// Serialized Name: MetricTrigger.timeAggregation
        /// </param>
        /// <param name="operator">
        /// the operator that is used to compare the metric data and the threshold.
        /// Serialized Name: MetricTrigger.operator
        /// </param>
        /// <param name="threshold">
        /// the threshold of the metric that triggers the scale action.
        /// Serialized Name: MetricTrigger.threshold
        /// </param>
        /// <param name="dimensions">
        /// List of dimension conditions. For example: [{&quot;DimensionName&quot;:&quot;AppName&quot;,&quot;Operator&quot;:&quot;Equals&quot;,&quot;Values&quot;:[&quot;App1&quot;]},{&quot;DimensionName&quot;:&quot;Deployment&quot;,&quot;Operator&quot;:&quot;Equals&quot;,&quot;Values&quot;:[&quot;default&quot;]}].
        /// Serialized Name: MetricTrigger.dimensions
        /// </param>
        /// <param name="isDividedPerInstance">
        /// a value indicating whether metric should divide per instance.
        /// Serialized Name: MetricTrigger.dividePerInstance
        /// </param>
        internal MetricTrigger(string metricName, string metricNamespace, ResourceIdentifier metricResourceId, AzureLocation? metricResourceLocation, TimeSpan timeGrain, MetricStatisticType statistic, TimeSpan timeWindow, MetricTriggerTimeAggregationType timeAggregation, MetricTriggerComparisonOperation @operator, double threshold, IList<AutoscaleRuleMetricDimension> dimensions, bool? isDividedPerInstance)
        {
            MetricName = metricName;
            MetricNamespace = metricNamespace;
            MetricResourceId = metricResourceId;
            MetricResourceLocation = metricResourceLocation;
            TimeGrain = timeGrain;
            Statistic = statistic;
            TimeWindow = timeWindow;
            TimeAggregation = timeAggregation;
            Operator = @operator;
            Threshold = threshold;
            Dimensions = dimensions;
            IsDividedPerInstance = isDividedPerInstance;
        }

        /// <summary>
        /// the name of the metric that defines what the rule monitors.
        /// Serialized Name: MetricTrigger.metricName
        /// </summary>
        public string MetricName { get; set; }
        /// <summary>
        /// the namespace of the metric that defines what the rule monitors.
        /// Serialized Name: MetricTrigger.metricNamespace
        /// </summary>
        public string MetricNamespace { get; set; }
        /// <summary>
        /// the resource identifier of the resource the rule monitors.
        /// Serialized Name: MetricTrigger.metricResourceUri
        /// </summary>
        public ResourceIdentifier MetricResourceId { get; set; }
        /// <summary>
        /// the location of the resource the rule monitors.
        /// Serialized Name: MetricTrigger.metricResourceLocation
        /// </summary>
        public AzureLocation? MetricResourceLocation { get; set; }
        /// <summary>
        /// the granularity of metrics the rule monitors. Must be one of the predefined values returned from metric definitions for the metric. Must be between 12 hours and 1 minute.
        /// Serialized Name: MetricTrigger.timeGrain
        /// </summary>
        public TimeSpan TimeGrain { get; set; }
        /// <summary>
        /// the metric statistic type. How the metrics from multiple instances are combined.
        /// Serialized Name: MetricTrigger.statistic
        /// </summary>
        public MetricStatisticType Statistic { get; set; }
        /// <summary>
        /// the range of time in which instance data is collected. This value must be greater than the delay in metric collection, which can vary from resource-to-resource. Must be between 12 hours and 5 minutes.
        /// Serialized Name: MetricTrigger.timeWindow
        /// </summary>
        public TimeSpan TimeWindow { get; set; }
        /// <summary>
        /// time aggregation type. How the data that is collected should be combined over time. The default value is Average.
        /// Serialized Name: MetricTrigger.timeAggregation
        /// </summary>
        public MetricTriggerTimeAggregationType TimeAggregation { get; set; }
        /// <summary>
        /// the operator that is used to compare the metric data and the threshold.
        /// Serialized Name: MetricTrigger.operator
        /// </summary>
        public MetricTriggerComparisonOperation Operator { get; set; }
        /// <summary>
        /// the threshold of the metric that triggers the scale action.
        /// Serialized Name: MetricTrigger.threshold
        /// </summary>
        public double Threshold { get; set; }
        /// <summary>
        /// List of dimension conditions. For example: [{&quot;DimensionName&quot;:&quot;AppName&quot;,&quot;Operator&quot;:&quot;Equals&quot;,&quot;Values&quot;:[&quot;App1&quot;]},{&quot;DimensionName&quot;:&quot;Deployment&quot;,&quot;Operator&quot;:&quot;Equals&quot;,&quot;Values&quot;:[&quot;default&quot;]}].
        /// Serialized Name: MetricTrigger.dimensions
        /// </summary>
        public IList<AutoscaleRuleMetricDimension> Dimensions { get; set; }
        /// <summary>
        /// a value indicating whether metric should divide per instance.
        /// Serialized Name: MetricTrigger.dividePerInstance
        /// </summary>
        public bool? IsDividedPerInstance { get; set; }
    }
}
