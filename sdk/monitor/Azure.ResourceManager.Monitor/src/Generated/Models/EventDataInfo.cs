// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.Monitor.Models
{
    /// <summary>
    /// The Azure event log entries are of type EventData
    /// Serialized Name: EventData
    /// </summary>
    public partial class EventDataInfo
    {
        /// <summary> Initializes a new instance of EventDataInfo. </summary>
        internal EventDataInfo()
        {
            Claims = new ChangeTrackingDictionary<string, string>();
            Properties = new ChangeTrackingDictionary<string, string>();
        }

        /// <summary> Initializes a new instance of EventDataInfo. </summary>
        /// <param name="authorization">
        /// The sender authorization information.
        /// Serialized Name: EventData.authorization
        /// </param>
        /// <param name="claims">
        /// key value pairs to identify ARM permissions.
        /// Serialized Name: EventData.claims
        /// </param>
        /// <param name="caller">
        /// the email address of the user who has performed the operation, the UPN claim or SPN claim based on availability.
        /// Serialized Name: EventData.caller
        /// </param>
        /// <param name="description">
        /// the description of the event.
        /// Serialized Name: EventData.description
        /// </param>
        /// <param name="id">
        /// the Id of this event as required by ARM for RBAC. It contains the EventDataID and a timestamp information.
        /// Serialized Name: EventData.id
        /// </param>
        /// <param name="eventDataId">
        /// the event data Id. This is a unique identifier for an event.
        /// Serialized Name: EventData.eventDataId
        /// </param>
        /// <param name="correlationId">
        /// the correlation Id, usually a GUID in the string format. The correlation Id is shared among the events that belong to the same uber operation.
        /// Serialized Name: EventData.correlationId
        /// </param>
        /// <param name="eventName">
        /// the event name. This value should not be confused with OperationName. For practical purposes, OperationName might be more appealing to end users.
        /// Serialized Name: EventData.eventName
        /// </param>
        /// <param name="category">
        /// the event category.
        /// Serialized Name: EventData.category
        /// </param>
        /// <param name="httpRequest">
        /// the HTTP request info. Usually includes the &apos;clientRequestId&apos;, &apos;clientIpAddress&apos; (IP address of the user who initiated the event) and &apos;method&apos; (HTTP method e.g. PUT).
        /// Serialized Name: EventData.httpRequest
        /// </param>
        /// <param name="level">
        /// the event level
        /// Serialized Name: EventData.level
        /// </param>
        /// <param name="resourceGroupName">
        /// the resource group name of the impacted resource.
        /// Serialized Name: EventData.resourceGroupName
        /// </param>
        /// <param name="resourceProviderName">
        /// the resource provider name of the impacted resource.
        /// Serialized Name: EventData.resourceProviderName
        /// </param>
        /// <param name="resourceId">
        /// the resource uri that uniquely identifies the resource that caused this event.
        /// Serialized Name: EventData.resourceId
        /// </param>
        /// <param name="resourceType">
        /// the resource type
        /// Serialized Name: EventData.resourceType
        /// </param>
        /// <param name="operationId">
        /// It is usually a GUID shared among the events corresponding to single operation. This value should not be confused with EventName.
        /// Serialized Name: EventData.operationId
        /// </param>
        /// <param name="operationName">
        /// the operation name.
        /// Serialized Name: EventData.operationName
        /// </param>
        /// <param name="properties">
        /// the set of &lt;Key, Value&gt; pairs (usually a Dictionary&lt;String, String&gt;) that includes details about the event.
        /// Serialized Name: EventData.properties
        /// </param>
        /// <param name="status">
        /// a string describing the status of the operation. Some typical values are: Started, In progress, Succeeded, Failed, Resolved.
        /// Serialized Name: EventData.status
        /// </param>
        /// <param name="subStatus">
        /// the event sub status. Most of the time, when included, this captures the HTTP status code of the REST call. Common values are: OK (HTTP Status Code: 200), Created (HTTP Status Code: 201), Accepted (HTTP Status Code: 202), No Content (HTTP Status Code: 204), Bad Request(HTTP Status Code: 400), Not Found (HTTP Status Code: 404), Conflict (HTTP Status Code: 409), Internal Server Error (HTTP Status Code: 500), Service Unavailable (HTTP Status Code:503), Gateway Timeout (HTTP Status Code: 504)
        /// Serialized Name: EventData.subStatus
        /// </param>
        /// <param name="eventTimestamp">
        /// the timestamp of when the event was generated by the Azure service processing the request corresponding the event. It in ISO 8601 format.
        /// Serialized Name: EventData.eventTimestamp
        /// </param>
        /// <param name="submissionTimestamp">
        /// the timestamp of when the event became available for querying via this API. It is in ISO 8601 format. This value should not be confused eventTimestamp. As there might be a delay between the occurrence time of the event, and the time that the event is submitted to the Azure logging infrastructure.
        /// Serialized Name: EventData.submissionTimestamp
        /// </param>
        /// <param name="subscriptionId">
        /// the Azure subscription Id usually a GUID.
        /// Serialized Name: EventData.subscriptionId
        /// </param>
        /// <param name="tenantId">
        /// the Azure tenant Id
        /// Serialized Name: EventData.tenantId
        /// </param>
        internal EventDataInfo(SenderAuthorization authorization, IReadOnlyDictionary<string, string> claims, string caller, string description, string id, string eventDataId, string correlationId, MonitorLocalizableString eventName, MonitorLocalizableString category, EventDataHttpRequestInfo httpRequest, MonitorEventLevel? level, string resourceGroupName, MonitorLocalizableString resourceProviderName, ResourceIdentifier resourceId, MonitorLocalizableString resourceType, string operationId, MonitorLocalizableString operationName, IReadOnlyDictionary<string, string> properties, MonitorLocalizableString status, MonitorLocalizableString subStatus, DateTimeOffset? eventTimestamp, DateTimeOffset? submissionTimestamp, string subscriptionId, Guid? tenantId)
        {
            Authorization = authorization;
            Claims = claims;
            Caller = caller;
            Description = description;
            Id = id;
            EventDataId = eventDataId;
            CorrelationId = correlationId;
            EventName = eventName;
            Category = category;
            HttpRequest = httpRequest;
            Level = level;
            ResourceGroupName = resourceGroupName;
            ResourceProviderName = resourceProviderName;
            ResourceId = resourceId;
            ResourceType = resourceType;
            OperationId = operationId;
            OperationName = operationName;
            Properties = properties;
            Status = status;
            SubStatus = subStatus;
            EventTimestamp = eventTimestamp;
            SubmissionTimestamp = submissionTimestamp;
            SubscriptionId = subscriptionId;
            TenantId = tenantId;
        }

        /// <summary>
        /// The sender authorization information.
        /// Serialized Name: EventData.authorization
        /// </summary>
        public SenderAuthorization Authorization { get; }
        /// <summary>
        /// key value pairs to identify ARM permissions.
        /// Serialized Name: EventData.claims
        /// </summary>
        public IReadOnlyDictionary<string, string> Claims { get; }
        /// <summary>
        /// the email address of the user who has performed the operation, the UPN claim or SPN claim based on availability.
        /// Serialized Name: EventData.caller
        /// </summary>
        public string Caller { get; }
        /// <summary>
        /// the description of the event.
        /// Serialized Name: EventData.description
        /// </summary>
        public string Description { get; }
        /// <summary>
        /// the Id of this event as required by ARM for RBAC. It contains the EventDataID and a timestamp information.
        /// Serialized Name: EventData.id
        /// </summary>
        public string Id { get; }
        /// <summary>
        /// the event data Id. This is a unique identifier for an event.
        /// Serialized Name: EventData.eventDataId
        /// </summary>
        public string EventDataId { get; }
        /// <summary>
        /// the correlation Id, usually a GUID in the string format. The correlation Id is shared among the events that belong to the same uber operation.
        /// Serialized Name: EventData.correlationId
        /// </summary>
        public string CorrelationId { get; }
        /// <summary>
        /// the event name. This value should not be confused with OperationName. For practical purposes, OperationName might be more appealing to end users.
        /// Serialized Name: EventData.eventName
        /// </summary>
        public MonitorLocalizableString EventName { get; }
        /// <summary>
        /// the event category.
        /// Serialized Name: EventData.category
        /// </summary>
        public MonitorLocalizableString Category { get; }
        /// <summary>
        /// the HTTP request info. Usually includes the &apos;clientRequestId&apos;, &apos;clientIpAddress&apos; (IP address of the user who initiated the event) and &apos;method&apos; (HTTP method e.g. PUT).
        /// Serialized Name: EventData.httpRequest
        /// </summary>
        public EventDataHttpRequestInfo HttpRequest { get; }
        /// <summary>
        /// the event level
        /// Serialized Name: EventData.level
        /// </summary>
        public MonitorEventLevel? Level { get; }
        /// <summary>
        /// the resource group name of the impacted resource.
        /// Serialized Name: EventData.resourceGroupName
        /// </summary>
        public string ResourceGroupName { get; }
        /// <summary>
        /// the resource provider name of the impacted resource.
        /// Serialized Name: EventData.resourceProviderName
        /// </summary>
        public MonitorLocalizableString ResourceProviderName { get; }
        /// <summary>
        /// the resource uri that uniquely identifies the resource that caused this event.
        /// Serialized Name: EventData.resourceId
        /// </summary>
        public ResourceIdentifier ResourceId { get; }
        /// <summary>
        /// the resource type
        /// Serialized Name: EventData.resourceType
        /// </summary>
        public MonitorLocalizableString ResourceType { get; }
        /// <summary>
        /// It is usually a GUID shared among the events corresponding to single operation. This value should not be confused with EventName.
        /// Serialized Name: EventData.operationId
        /// </summary>
        public string OperationId { get; }
        /// <summary>
        /// the operation name.
        /// Serialized Name: EventData.operationName
        /// </summary>
        public MonitorLocalizableString OperationName { get; }
        /// <summary>
        /// the set of &lt;Key, Value&gt; pairs (usually a Dictionary&lt;String, String&gt;) that includes details about the event.
        /// Serialized Name: EventData.properties
        /// </summary>
        public IReadOnlyDictionary<string, string> Properties { get; }
        /// <summary>
        /// a string describing the status of the operation. Some typical values are: Started, In progress, Succeeded, Failed, Resolved.
        /// Serialized Name: EventData.status
        /// </summary>
        public MonitorLocalizableString Status { get; }
        /// <summary>
        /// the event sub status. Most of the time, when included, this captures the HTTP status code of the REST call. Common values are: OK (HTTP Status Code: 200), Created (HTTP Status Code: 201), Accepted (HTTP Status Code: 202), No Content (HTTP Status Code: 204), Bad Request(HTTP Status Code: 400), Not Found (HTTP Status Code: 404), Conflict (HTTP Status Code: 409), Internal Server Error (HTTP Status Code: 500), Service Unavailable (HTTP Status Code:503), Gateway Timeout (HTTP Status Code: 504)
        /// Serialized Name: EventData.subStatus
        /// </summary>
        public MonitorLocalizableString SubStatus { get; }
        /// <summary>
        /// the timestamp of when the event was generated by the Azure service processing the request corresponding the event. It in ISO 8601 format.
        /// Serialized Name: EventData.eventTimestamp
        /// </summary>
        public DateTimeOffset? EventTimestamp { get; }
        /// <summary>
        /// the timestamp of when the event became available for querying via this API. It is in ISO 8601 format. This value should not be confused eventTimestamp. As there might be a delay between the occurrence time of the event, and the time that the event is submitted to the Azure logging infrastructure.
        /// Serialized Name: EventData.submissionTimestamp
        /// </summary>
        public DateTimeOffset? SubmissionTimestamp { get; }
        /// <summary>
        /// the Azure subscription Id usually a GUID.
        /// Serialized Name: EventData.subscriptionId
        /// </summary>
        public string SubscriptionId { get; }
        /// <summary>
        /// the Azure tenant Id
        /// Serialized Name: EventData.tenantId
        /// </summary>
        public Guid? TenantId { get; }
    }
}
